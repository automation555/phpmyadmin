<?php

declare(strict_types=1);

namespace PhpMyAdmin;

use function opendir;
use function mkdir;
use function readdir;
use function is_dir;
use const DIRECTORY_SEPARATOR;
use function copy;
use function closedir;
use function file_get_contents;
use function file_exists;
use function clearstatcache;
use function is_writable;
use function trigger_error;
use function file_put_contents;
use function json_encode;
use const LOCK_EX;
use const E_USER_ERROR;

/**
 * Set of functions for Automated Theme Generator in phpMyAdmin
 */
class ThemeGenerator
{
    /**
     * Recursion copy function from one directory to another
     *
     * @param string $src Source path of the directory
     * @param string $dst Destination path of the directory
     */
    private function recurseCopy(string $src, string $dst): void
    {
        $dir = opendir($src);
        if ($dir == false) {
            return;
        }
        mkdir($dst);
        while (( $file = readdir($dir)) !== false) {
            if (( $file == '.' ) || ( $file == '..' )) {
                continue;
            }

            if (is_dir($src . DIRECTORY_SEPARATOR . $file)) {
                $this->recurseCopy($src . DIRECTORY_SEPARATOR . $file, $dst . DIRECTORY_SEPARATOR . $file);
            } else {
                copy($src . DIRECTORY_SEPARATOR . $file, $dst . DIRECTORY_SEPARATOR . $file);
            }
        }
        closedir($dir);
    }

    /**
     * Saves file contents of directory in $arr
     *
     * @param string $src     Source directory
     * @param array  $arr     Array where file data is stored
     * @param string $address relative directory address
     */
    public function fillDirectoryData(string $src, array &$arr, string $address = ''): void
    {
        $dir = opendir($src);
        if ($dir == false) {
            return;
        }
        while (( $file = readdir($dir)) !== false) {
            if (( $file == '.' ) || ( $file == '..' )) {
                continue;
            }

            if (is_dir($src . DIRECTORY_SEPARATOR . $file)) {
                $this->fillDirectoryData(
                    $src . DIRECTORY_SEPARATOR . $file,
                    $arr,
                    $address . $file . DIRECTORY_SEPARATOR
                );
            } else {
                $arr[$address . $file] = file_get_contents($src . DIRECTORY_SEPARATOR . $file);
            }
        }
        closedir($dir);
    }

    /**
     * Returns all SCSS file data
     *
     * @return array<string,string> SCSS file data
     * TODO: remove this
     */
    public function getScssFile(): array
    {
        $out = [];
        $this->fillDirectoryData(ROOT_PATH . 'themes/pmahomme/scss', $out);
        $this->fillDirectoryData(ROOT_PATH . 'node_modules/bootstrap/scss', $out, 'bootstrap/');
        $out['_bootstrap.scss'] = file_get_contents(ROOT_PATH . 'themes/bootstrap/scss/_bootstrap.scss');

        return $out;
    }

    /**
     * Creates file structure
     *
     * @param string $name Name of the theme
     */
    public function createFileStructure(string $name): void
    {
        if (! is_dir(ROOT_PATH . 'themes/' . $name)) {
            mkdir(ROOT_PATH . 'themes/' . $name);
            mkdir(ROOT_PATH . 'themes/' . $name . '/css');
        }
        if (! is_dir(ROOT_PATH . 'themes/' . $name)) {
            return;
        }

        $this->createJsonFile($name);
        $this->recurseCopy(ROOT_PATH . 'themes/pmahomme/img', ROOT_PATH . 'themes/' . $name . '/img');
        $this->recurseCopy(ROOT_PATH . 'themes/pmahomme/jquery', ROOT_PATH . 'themes/' . $name . '/jquery');
    }

    /**
     * Checks theme creation
     *
     * @param string $name  Name of the theme
     * @param array  $files Array of files to be checked
     *
     * @return bool Theme successfully created or not
     */
    public function checkThemeCreation(string $name, array $files)
    {
        foreach ($files as $file) {
            if (! file_exists(ROOT_PATH . 'themes/' . $name . '/css/' . $file)) {
                return false;
            }
        }

        return file_exists(ROOT_PATH . 'themes/' . $name . '/theme.json');
    }

    /**
     * Checks whether the theme directory is writable
     */
    public static function isThemeDirectoryWritable(): bool
    {
        clearstatcache();

        return is_writable(ROOT_PATH . 'themes/');
    }

    /**
     * Creates theme.json
     *
     * @param string $name Theme Name
     */
    public function createJsonFile(string $name): void
    {
        global $PMA_Config;

        $majorVersion = $PMA_Config->get('PMA_MAJOR_VERSION');
        $data = [];
        $data['name'] = $name;
        $data['version'] = '1.0';
        $data['description'] = 'Theme Generated by Automated Theme Generator';
        $data['author'] = 'Automated Theme Generator';
        $data['url'] = 'https://www.phpmyadmin.net/';
        $data['supports'] = [$majorVersion];

        if (file_exists(ROOT_PATH . 'themes/' . $name . '/theme.json')) {
            return;
        }

        $file = file_put_contents(ROOT_PATH . 'themes/' . $name . '/theme.json', json_encode($data), LOCK_EX);
        // Check if the file is not written
        if ($file === false) {
            return;
        }

        trigger_error(
            __(
                'The theme.json file is not writable by the webserver process.'
                . ' You must change permissions for the theme generator to be able to write the generated theme.'
            ),
            E_USER_ERROR
        );
    }
}
